/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/secyu/mycontroller/pkg/apis/mycontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DevopsLister helps list Devopses.
// All objects returned here must be treated as read-only.
type DevopsLister interface {
	// List lists all Devopses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Devops, err error)
	// Devopses returns an object that can list and get Devopses.
	Devopses(namespace string) DevopsNamespaceLister
	DevopsListerExpansion
}

// devopsLister implements the DevopsLister interface.
type devopsLister struct {
	indexer cache.Indexer
}

// NewDevopsLister returns a new DevopsLister.
func NewDevopsLister(indexer cache.Indexer) DevopsLister {
	return &devopsLister{indexer: indexer}
}

// List lists all Devopses in the indexer.
func (s *devopsLister) List(selector labels.Selector) (ret []*v1.Devops, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Devops))
	})
	return ret, err
}

// Devopses returns an object that can list and get Devopses.
func (s *devopsLister) Devopses(namespace string) DevopsNamespaceLister {
	return devopsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DevopsNamespaceLister helps list and get Devopses.
// All objects returned here must be treated as read-only.
type DevopsNamespaceLister interface {
	// List lists all Devopses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Devops, err error)
	// Get retrieves the Devops from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Devops, error)
	DevopsNamespaceListerExpansion
}

// devopsNamespaceLister implements the DevopsNamespaceLister
// interface.
type devopsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Devopses in the indexer for a given namespace.
func (s devopsNamespaceLister) List(selector labels.Selector) (ret []*v1.Devops, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Devops))
	})
	return ret, err
}

// Get retrieves the Devops from the indexer for a given namespace and name.
func (s devopsNamespaceLister) Get(name string) (*v1.Devops, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("devops"), name)
	}
	return obj.(*v1.Devops), nil
}
